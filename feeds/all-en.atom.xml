<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andre Fellipe</title><link href="https://andrefellipe.com/" rel="alternate"></link><link href="https://andrefellipe.com/feeds/all-en.atom.xml" rel="self"></link><id>https://andrefellipe.com/</id><updated>2021-01-23T23:36:00-03:00</updated><subtitle>made on the internet</subtitle><entry><title>The Tech U Movies</title><link href="https://andrefellipe.com/tech-u-movies.html" rel="alternate"></link><published>2020-08-09T06:58:00-03:00</published><updated>2021-01-23T23:36:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2020-08-09:/tech-u-movies.html</id><summary type="html">&lt;p class="first last"&gt;The first phase of the AWS Tech U Program is over. I saw 137 movies during the last 5 months and let's talk about 10 of them here. This post was written to the sound of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Paramore_(album)"&gt;Paramore's&lt;/a&gt; self-titled album. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=OblL026SvD4"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This text is not about the &lt;strong&gt;best&lt;/strong&gt; movies that I watched during this period. It's about movies that I thought that, for whatever reason, I should write about. All of them are interesting and I even rewatched a few before publishing this post, so you should absolutely check them out in case you are looking for recommendations.&lt;/p&gt;
&lt;div class="section" id="o-caso-dos-irmaos-naves-1967"&gt;
&lt;h2&gt;&lt;strong&gt;O Caso dos Irmãos Naves (1967)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie O Caso dos Irmãos Naves, made in 1967" class="align-center" src="images/11-01-naves.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;Here.&amp;quot; - Multiple officers&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Luís Sérgio Person.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A man disappear with a large sum of money and the investigation leads to one of the biggest mistakes in the history of Brazil's judiciary system. Two brothers are arrested and tortured to obtain a confession even though they did not commit the crime.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; This is of the most gut-wrenching brazilian movies ever made. The torture scenes are intense and the police's lack of moral character puts the viewer in a uncomfortable position throughout 90 minutes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The police forces one of the Naves brothers to search for the stolen money in an empty field. They know that there's no money to be found there and still torture an innocent man only to play with his mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="twilight-zone-the-movie-1983"&gt;
&lt;h2&gt;&lt;strong&gt;Twilight Zone: The Movie (1983)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie Twilight Zone, made in 1983" class="align-center" src="images/11-02-twilight.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;Do you want to see something really scary?&amp;quot; - The Passenger&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; John Landis, Steven Spielberg, Joe Dante and George Miller.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A remake of three episodes of the original Twilight Zone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; The whole movie is uneven at best, but everything starts with a bang. The opening scene is a beautiful combination of humor, horror and homage to the original TV series. In the category &amp;quot;Movies that start brilliantly only to have not-so-great follow-ups&amp;quot;, this one only loses to &lt;a class="reference external" href="https://www.youtube.com/watch?v=HVy-TSs7Gio"&gt;When a Stranger Calls&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The opening scene where Albert Brooks and Dan Aykroyd discuss the most scary episodes of The Twilight Zone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spoorloos-1988"&gt;
&lt;h2&gt;&lt;strong&gt;Spoorloos (1988)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie Spoorloos, made in 1988" class="align-center" src="images/11-03-vanishing.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;But I want you to know, for me killing is not the worst thing.&amp;quot; - Raymond Lemorne&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; George Sluizer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A couple is travelling on holiday in France and while they stop to refuel, the girl enters to buy drinks and is never seen again. Her boyfriend enters a multi-year saga to find out what happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; It has one of the most acclaimed endings in cinema history, but the movie as a whole offers much more. Spoorloos is a dense study about obsession and how humanity's dark side develops over time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The ending sequence where we discover what happened.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-quiet-place-2018"&gt;
&lt;h2&gt;&lt;strong&gt;A Quiet Place (2018)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie A Quiet Place, made in 2018" class="align-center" src="images/11-04-quiet.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;I love you. I have always loved you.&amp;quot; - Lee Abbott&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; John Krasinski.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A family struggles to survive in a post-apocalyptic world where humanity must scape from monsters that are attracted to sound.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; Because a well-made movie where the characters are not allowed to speak is an impressive feat. A Quiet Place creates incredible tension with the use of silence and shows that Krasinski is quite a skilled director, able to convey a thriller where the course of action for the characters is to avoid confrontations with the monsters instead of battling them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The sacrifice scene.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hitman-hart-wrestling-with-shadows-1998"&gt;
&lt;h2&gt;&lt;strong&gt;Hitman Hart: Wrestling with Shadows (1998)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie Hitman Hart: Wrestling with Shadows, made in 1998" class="align-center" src="images/11-05-hitman.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;Bret screwed Bret. I have no sympathy whatsoever for Bret.&amp;quot; - Vince McMahon&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Paul Jay.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A documentary following professional wrestler Bret &amp;quot;The Hitman&amp;quot; Hart during his final months in the World Wrestling Federation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; I've watched a ton of documentaries in the timeframe described above and chose two for this list. This one is here for a couple of reasons: it reminded me of 2008, when professional wrestling started to be broadcasted on network TV here in Brazil and I watched with my uncle, and also because it's a really underrated gem. This is a rise and fall story of a man that took pride in his profession, saw his boss as a father figure and was unable to adapt to his audience's newly-acquired preference in anti-heroes as protagonists instead of goody two-shoes personas. All of this and a company in financial peril culminated in a depressing night in Montreal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; After the movie's defining moment, the mind responsible for everything explains his actions on live television.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="drag-me-to-hell-2009"&gt;
&lt;h2&gt;&lt;strong&gt;Drag Me to Hell (2009)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie Drag Me to Hell, made in 2009" class="align-center" src="images/11-06-hell.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;I did what you said! I killed a little kitty!&amp;quot; - Christine Brown&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Sam Raimi.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A loan officer chooses not to give an extension to the mortgage of an old lady. The lady in question is a gypsy woman with a blind eye and retaliates with a curse that makes the next few days of the protagonist's life a living hell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; Sam Raimi directed two of my favorite movie series, the Tobey Maguire Spider-Man movies (I know the third one is terrible) and Evil Dead, but those are the only movies of his that I watched before looking into Drag Me to Hell. This movie is a campy ride with some funny bits and weird horror sequences. The textbook definition of good, but not much more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The fight scene in the garage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="el-secreto-de-sus-ojos-2009"&gt;
&lt;h2&gt;&lt;strong&gt;El Secreto de sus Ojos (2009)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie El Secreto de sus Ojos, made in 2009" class="align-center" src="images/11-07-eyes.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;A guy can change anything. His face, his home, his family, his girlfriend, his religion, his God. But there's one thing he can't change. He can't change his passion.&amp;quot; - Pablo Sandoval&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Juan José Campanella.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A woman is raped and murdered and the characters involved in the investigation are followed through 25 years in a nonlinear narrative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; A modern classic from Argentina, El Secreto de sus Ojos deals with the theme of passion, showing its good and bad side in a beautiful love story and a twisted murder. Everybody in this movie is hiding something and Juan José Campanella shines in the direction with the lovely use of close-ups to bring the characters' eyes into the forefront. Since the eyes are the windows to the soul, nothing here stays hidden for too long and the result is a memorable journey through the years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The chase inside &lt;em&gt;El Cilindro&lt;/em&gt;. God bless the souls that filmed this sequence, an amazing achievement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enron-the-smartest-guys-in-the-room-2005"&gt;
&lt;h2&gt;&lt;strong&gt;Enron: The Smartest Guys in the Room (2005)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie Enron: The Smartest Guys in the Room, made in 2005" class="align-center" src="images/11-08-enron.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;We are the good guys. We are on the side of angels.&amp;quot; - Jeffrey Skilling&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Alex Gibney.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A documentary about the fall of the Enron Corporation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; After COVID-19 and the subprime crisis, it seems that the Enron scandal is something from another era, but it has been less than 20 years since what appeared to be an energy empire crumbled down in less than a month. This documentary really knows which buttons to push to make the audience angry with the multiple crimes committed. The way that Alex Gibney peels the onion and makes you angrier and angrier with the actions of Enron makes this a must-watch documentary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; A lineman from a power company that Enron bought learns that his retirement fund went from $250,000 to $1,000. He'll never retire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spirited-away-2001"&gt;
&lt;h2&gt;&lt;strong&gt;Spirited Away (2001)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie Spirited Away, made in 2001" class="align-center" src="images/11-09-spirited.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;I promise I'll get you out of here, just don't get any fatter or they'll eat you.&amp;quot; - Chihiro Ogino&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Hayao Miyazaki.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; A 10-year-old girl enters the world of spirits after her parents are turned into pigs by a witch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; It's the japanese Alice in Wonderland and Miyazaki shows us once again how beautiful hand-drawn animation is. Spirited Away is more than a movie, it's an experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The ride in the train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-apartment-1960"&gt;
&lt;h2&gt;&lt;strong&gt;The Apartment (1960)&lt;/strong&gt;&lt;/h2&gt;
&lt;img alt="Shot from the movie The Apartment, made in 1960" class="align-center" src="images/11-10-apartment.png" /&gt;
&lt;p class="center"&gt;&lt;em&gt;&amp;quot;Shut up and deal.&amp;quot; - Fran Kubelik&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; Billy Wilder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plot:&lt;/strong&gt; An insurance clerk allows senior coworkers to have affairs in his apartment to help him climb the corporate ladder. He's also in love with the building's elevator girl.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it here:&lt;/strong&gt; The Apartment goes deeper than the average romantic comedy. It's funny? Yep. The leads have amazing chemistry? Absolutely. But there's just a hint of sadness and loneliness injected in this group of broken characters that pushes this movie over the line, making it one of the best and most rewatchable films ever made. It meshes all of these elements so naturally and with such delicacy that even the absurd premise sounds like a normal day at the office.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The scene:&lt;/strong&gt; The ending. A lot of romantic comedies end in similar fashion. They end this way because of the brilliance of this movie final sequence.&lt;/p&gt;
&lt;p&gt;That's it. I'm interested in watching more movies in the near future. I wrote movie and TV reviews during my teen years and it has always been a pleasure of mine. While adult life limits my time to write extensive reviews, I plan to add some sort of frequency to my posts here and quick texts about movies are a good alternative. Let's see what the future holds.&lt;/p&gt;
&lt;/div&gt;
</content><category term="movies"></category><category term="amazon"></category><category term="aws"></category><category term="work"></category><category term="movies"></category></entry><entry><title>Day One</title><link href="https://andrefellipe.com/aws-day-one.html" rel="alternate"></link><published>2020-05-03T01:56:00-03:00</published><updated>2020-05-03T01:56:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2020-05-03:/aws-day-one.html</id><summary type="html">&lt;p class="first last"&gt;After graduating from college, I became an Amazonian. Let's talk a little bit about this process and this awesome beginning. This post was written to the sound of the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Top_Gun_(soundtrack)"&gt;soundtrack from Top Gun&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=siwpn14IE7E"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Wow.&lt;/p&gt;
&lt;p&gt;What a ride the last few months have been.&lt;/p&gt;
&lt;p&gt;As you may already figured out, I got hired by Amazon after graduating from college.&lt;/p&gt;
&lt;p&gt;To be more specific, I'm currently part of Amazon Web Services (AWS).&lt;/p&gt;
&lt;p&gt;To be even more specific, I'm a part of AWS Tech U Program, a special program for new graduates to train them to become Solutions Architects. I got the opportunity to move from my hometown, Natal, to Latin America's biggest city - in terms of population, Sao Paulo. It was a brilliant recruitment experience and an amazing onboarding process at AWS.&lt;/p&gt;
&lt;p&gt;But, then, the world stopped.&lt;/p&gt;
&lt;p&gt;COVID-19 happened.&lt;/p&gt;
&lt;p&gt;I actually spent just one week on-premises before AWS decided that I could work from home during the pandemic. I didn't even setup my workspace properly. There's probably an unplugged HDMI cable hanging out at my desk as you're reading this.&lt;/p&gt;
&lt;p&gt;I'm not going to dwell much about the situation since everybody is living it, but I would like to point it out how grateful - some might say even lucky - I am right now to have started my career here. The carnage from the pandemic can not be understated. I got relatives and friends that lost jobs as soon as the quarantines started. Of course, as almost everyone on planet Earth right now, I'm a little bit anxious about my future, but so far I'm grateful that the effects haven't affected the program - even though anything can happen. The only thing I can do is work hard and be mindful about my health and the health of everyone around me.&lt;/p&gt;
&lt;p&gt;Actually, that's not the only thing I can do. I can watch Married... with Children. I'm currently on season 3. Jim Halpert may have to watch out, Al Bundy is making a big case to be my new favorite TV character.&lt;/p&gt;
&lt;p&gt;Anyways, I hope that everything comes back to normal as soon as possible. COVID-19 looks like my generation's defining moment... and I'm sure we will overcome it.&lt;/p&gt;
</content><category term="work"></category><category term="amazon"></category><category term="aws"></category><category term="work"></category></entry><entry><title>Quant boys, quant boys, whatcha gonna do</title><link href="https://andrefellipe.com/cfm-2019.html" rel="alternate"></link><published>2020-01-26T23:20:00-03:00</published><updated>2020-01-26T23:20:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2020-01-26:/cfm-2019.html</id><summary type="html">&lt;p class="first last"&gt;At the end of 2019, I participated in another data science competition, this time related to finance. This post was written to the sound of The Police's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Outlandos_d%27Amour"&gt;Outlandos d'Amour'&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=nH0vjLwMyc4"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I participated in my second data science competition last month and it was again a worthy experience.&lt;/p&gt;
&lt;p&gt;My team, composed of myself and two friends, competed with 131 teams from all over the world at &lt;a class="reference external" href="https://www.cfm.fr/"&gt;Capital Fund Management&lt;/a&gt;’s 2019 supervised machine learning challenge, hosted at &lt;a class="reference external" href="https://en.wikipedia.org/wiki/%C3%89cole_normale_sup%C3%A9rieure_(Paris)"&gt;ENS&lt;/a&gt;’s &lt;a class="reference external" href="https://challengedata.ens.fr/"&gt;Challenge Data&lt;/a&gt; platform.&lt;/p&gt;
&lt;p&gt;The goal was to predict sign accuracy using anonymized US stock returns data, a highly stochastic dataset with 1 million lines and 74 columns (training + test).&lt;/p&gt;
&lt;p&gt;The group split between different tasks such as feature engineering, essaying neural network architectures (my part) and AutoML frameworks, and applying traditional ML methods like GBMs.&lt;/p&gt;
&lt;p&gt;Our best submission was a CNN-based one that unfortunately overfit the training data a little, which gave us the final ranking of 15.&lt;/p&gt;
&lt;p&gt;We did this in less than a month. I believe that we will participate again this year and we're going to go even further since we have more time.&lt;/p&gt;
&lt;p&gt;The first place wins an iPad. I never had one and, oh boy, I want it.&lt;/p&gt;
&lt;p&gt;After winning in 2020, all three of us then can become quant traders and be filthy rich for the rest of our lives. Finance is awesome!&lt;/p&gt;
&lt;p&gt;Stay tuned next year to find out if the plan goes accordingly.&lt;/p&gt;
</content><category term="portfolio"></category><category term="statistics"></category><category term="data science"></category><category term="python"></category></entry><entry><title>This is the end, beautiful friend</title><link href="https://andrefellipe.com/ufrn-final-project.html" rel="alternate"></link><published>2019-12-01T15:30:00-03:00</published><updated>2019-12-01T15:30:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2019-12-01:/ufrn-final-project.html</id><summary type="html">&lt;p class="first last"&gt;I've presented my final project at the university last week. This post was written to the sound of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Doors_(album)"&gt;The Doors'&lt;/a&gt; eponymous album. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=BXqPNlng6uI"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;So, I'm only a few days away from officially becoming an electrical engineer. The final step was taken last thursday. I did my presentation and the professors loved it. One of the them even invited me to do my master's degree with him.&lt;/p&gt;
&lt;p&gt;Here's the official photo:&lt;/p&gt;
&lt;img alt="Professor Max Chianca, myself and professor Marcos Dias." class="align-center" src="images/08-01-Final-Project-Presentation.jpeg" /&gt;
&lt;p&gt;If you didn't realized yet from older posts, I'm always the tall one.&lt;/p&gt;
&lt;p&gt;My final project was a very easy one. Last july, during my Electrical Substations class, the professor suggested that developing a program to design grounding grids for substations alongside a tool for soil stratification would be a good idea for a final project. I thought to myself &amp;quot;Hey, I can do this very quickly&amp;quot; and I did it in two weeks.&lt;/p&gt;
&lt;p&gt;Originally, I did it on MATLAB. In the beginning of september I think, I decided to develop an API using Django and put it up on Heroku. Then, I created a small form to consume the API and used Heroku again to leave it online.&lt;/p&gt;
&lt;p&gt;The MATLAB and Python code can be found on &lt;a class="reference external" href="https://github.com/andrefellipe/esd"&gt;GitHub&lt;/a&gt; and the live website is on this weird &lt;a class="reference external" href="https://grounding-design.herokuapp.com/index.html"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The math behind everything is not very difficult and I'm not going to dwell on it much. Basically, we have to minimize this function to do the soil stratification with two layers:&lt;/p&gt;
&lt;img alt="Least squares equation for two-layer soil stratification." class="align-center" src="images/08-02-Equation.png" /&gt;
&lt;p&gt;Also, there's a block diagram on the standard IEEE 80-2000 that I followed to check if the grounding grid has adequate touch and step voltages:&lt;/p&gt;
&lt;img alt="Design procedure block diagram." class="align-center" src="images/08-03-Design-Procedure-Block-Diagram.png" /&gt;
&lt;p&gt;Even though this is not a difficult project, I liked because it was something that was done very quickly. I loved because I did it very early and had the time to focus on more important things for my career.&lt;/p&gt;
&lt;p&gt;If you need a simple tool to do soil stratification and check if your rectangular grounding grid is safe, you're good to go.&lt;/p&gt;
&lt;p&gt;This is it.&lt;/p&gt;
&lt;p&gt;The end.&lt;/p&gt;
&lt;p&gt;I'm a electrical engineer now.&lt;/p&gt;
&lt;p&gt;Let's see what the future holds.&lt;/p&gt;
</content><category term="portfolio"></category><category term="matlab"></category><category term="python"></category><category term="ufrn"></category></entry><entry><title>Is it just me, or is it hot in here?</title><link href="https://andrefellipe.com/ufrn-data-science-comp-2019.html" rel="alternate"></link><published>2019-11-20T23:00:00-03:00</published><updated>2019-11-20T23:00:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2019-11-20:/ufrn-data-science-comp-2019.html</id><summary type="html">&lt;p class="first last"&gt;Let's talk about my first participation on a data science competition. This post was written to the sound of The Killers' &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hot_Fuss"&gt;Hot Fuss&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=gGdGFtwCNBE"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A colleague of mine invited me to create a team to win the 2019 UFRN Data Science Competition last month. I've never participated in one before and I thought that it was a cool experience. Our five-person group had a couple of days to do any kind of analysis on meteorological data provided by INMET, the government agency responsible for this kind of stuff.&lt;/p&gt;
&lt;p&gt;We had to move quickly and precisely to bring to the public a creative analysis of a lot of data - basically everything related to temperatures, humidity, wind and similar variables from 1961 to today from every part of Brazil.&lt;/p&gt;
&lt;p&gt;We visualized the impact that this year's Amazon fires had on the data through geospatially visualizing temperature differences according to a baseline, running a PCA and investigating spatial patterns, and forecasting temperatures to look for anomalies. My job was to do the last part using this cool tool from Facebook called &lt;a class="reference external" href="https://facebook.github.io/prophet/docs/quick_start.html"&gt;Prophet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, we came up short and got second place. I honestly believe that we should have won it and one member of my team even argued with the judges a little bit, but to no avail.&lt;/p&gt;
&lt;p&gt;It was a cool debut, though. Right now, we are getting prepared to try again in similar competitions.&lt;/p&gt;
&lt;p&gt;The most unfortunate part of everything was the fact that when we got to the front to receive our medals, there were two cameras, one from one of the professors and the official one of the event. I didn't notice that and put my focus on the professor's one.&lt;/p&gt;
&lt;p&gt;So, yeah, I look kind of stupid in the picture.&lt;/p&gt;
&lt;img alt="The whole team receiving the medals." class="align-center" src="images/07-01-Team-Picture.jpeg" /&gt;
&lt;p&gt;Jesus, sometimes I forget how tall I am.&lt;/p&gt;
&lt;p&gt;The final presentation and all of the code can be found on GitHub. You can access it with this &lt;a class="reference external" href="https://github.com/vitorsr/ccd"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And through this &lt;a class="reference external" href="https://marcusnunes.me/posts/resultados-da-competicao-de-ciencia-de-dados-da-ufrn-2019/"&gt;one&lt;/a&gt;, you can check out more information about the competition. If you know brazilian portuguese, that is.&lt;/p&gt;
&lt;p&gt;PS: From left to right in the picture, we have André L., Ianca, Prof. Nunes¹, Vítor, &lt;em&gt;moi&lt;/em&gt; and Mariana. We are the &lt;strong&gt;weeee&lt;/strong&gt; team!&lt;/p&gt;
&lt;p&gt;¹ Prof. Nunes was one of the judges.&lt;/p&gt;
</content><category term="portfolio"></category><category term="statistics"></category><category term="data science"></category><category term="python"></category><category term="ufrn"></category></entry><entry><title>E&amp;Q Online</title><link href="https://andrefellipe.com/eq.html" rel="alternate"></link><published>2019-05-01T17:00:00-03:00</published><updated>2019-05-01T17:00:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2019-05-01:/eq.html</id><summary type="html">&lt;p class="first last"&gt;A brief description of one freelance project I've just did and how it came about. This post was written to the sound of The Clash's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/London_Calling"&gt;London Calling&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=ertt3o1x65c"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;During the first semester of 2018, I was an intern at a small local company. The company's name is &lt;a class="reference external" href="https://www.engenhariaequalidade.com.br/"&gt;Engenharia &amp;amp; Qualidade&lt;/a&gt; and it has been around for more than two decades. It has 10 employees as of May/2019, including the two main partners, and a long range of services that goes from structured cabling to studies of grounding and soil resistivity testing of substations. Basically, the company can solve anything in the fields of electrical installations and telecommunications thanks to the expertise of its two owners. Its major client is one of the biggest (if not the biggest) supermarket chains of my state, &lt;a class="reference external" href="http://www.nordestao.com.br/"&gt;Nordestão&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my internship, I was responsible for the budgets and, sometimes, the supervision of the execution of some projects. As you may already know, there was a lot of Excel and AutoCAD involved. It was a brilliant experience, but, after my six months there, I came to the conclusion that this would not be something that I would like to do for a living.&lt;/p&gt;
&lt;p&gt;I decided to not renew my contract after one semester. During my time there, I automated a lot of the tasks on the spreadsheets that the company had, but there was a gap because we used a lot of different management tools. Excel for the budget, an old software made with VB to manage the clients and the warehouse, a physical book that the employees signed with the worked hours, etc. One of my ideas after dealing with all of that was to replace everything with something that could unify everything the company did.&lt;/p&gt;
&lt;p&gt;I wasn't able to implement the system while I was an intern because my actual job (budgets and supervision of projects) didn't allowed me the time. This year, however, I approached the owners with this idea and they thought it would be great if I developed a website with all of necessary functionalities. We agreed on a price and, during the months of march and april, I've developed E&amp;amp;Q Online, a website hosted at the company own server to internal use.&lt;/p&gt;
&lt;p&gt;This is the login screen:&lt;/p&gt;
&lt;img alt="The login screen." class="align-center" src="images/06-01-EQ-01.png" /&gt;
&lt;p&gt;And this is the homepage after the user logs in:&lt;/p&gt;
&lt;img alt="The homepage after the login screen." class="align-center" src="images/06-02-EQ-02.png" /&gt;
&lt;p&gt;Thanks to the agreement between me and the owners, I am going to be very selective of what parts of the website I am going to discuss here.&lt;/p&gt;
&lt;p&gt;As you can see, there's nine areas in the platform: &lt;strong&gt;Log&lt;/strong&gt;, &lt;strong&gt;Users&lt;/strong&gt;, &lt;strong&gt;Suppliers&lt;/strong&gt;, &lt;strong&gt;Clients&lt;/strong&gt;, &lt;strong&gt;Transport&lt;/strong&gt;, &lt;strong&gt;Warehouse&lt;/strong&gt;, &lt;strong&gt;Proposals&lt;/strong&gt;, &lt;strong&gt;Orders&lt;/strong&gt; and &lt;strong&gt;Accounts&lt;/strong&gt;. Let's do a brief rundown of each:&lt;/p&gt;
&lt;div class="section" id="log"&gt;
&lt;h2&gt;Log&lt;/h2&gt;
&lt;p&gt;Here, the users can register when they arrive at the company, when they go out to lunch, when they return and when they leave. Also, the users are able to register any missing day. The users in the &lt;strong&gt;Administrator&lt;/strong&gt; category can see, update or delete the records and missing days from all of the users. If the user is not a part of this category, he can only see his own records.&lt;/p&gt;
&lt;p&gt;Here's the screen where the user can choose what's the type of logging that he's doing it:&lt;/p&gt;
&lt;img alt="The screen where the user can choose the type of logging." class="align-center" src="images/06-03-EQ-03.png" /&gt;
&lt;p&gt;If the user chooses the first option, he's going to register that he has arrived at the company. After the confirmation, a new record is created with the current timestamp.&lt;/p&gt;
&lt;img alt="The screen where the user can log in." class="align-center" src="images/06-04-EQ-04.png" /&gt;
&lt;p&gt;As I said before, an administrator can see all of the records in a very friendly manner. He's able to search for any record by using any parameter (the name of the user, the date, the type of entry, etc) and he can update or delete any record:&lt;/p&gt;
&lt;img alt="The screen with all records." class="align-center" src="images/06-05-EQ-05.png" /&gt;
&lt;p&gt;The user can also create a record of absence if he missed a day:&lt;/p&gt;
&lt;img alt="The screen where the user can register an absence." class="align-center" src="images/06-06-EQ-06.png" /&gt;
&lt;p&gt;And an administrator can see all absences. In this particular print, there isn't one registered yet.&lt;/p&gt;
&lt;img alt="The screen where the user can see all absences." class="align-center" src="images/06-07-EQ-07.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="users"&gt;
&lt;h2&gt;Users&lt;/h2&gt;
&lt;p&gt;In the Users section, an administrator can create, update or delete an user:&lt;/p&gt;
&lt;img alt="The screen where the user can see all registered users." class="align-center" src="images/06-08-EQ-08.png" /&gt;
&lt;p&gt;Also, as you can see, the users can alter their passwords. An important part of the &lt;strong&gt;Users&lt;/strong&gt; section is that every week an email is sent to the administrators with the due date of the users' documents. This is relevant because they can see when the document is going to expire and renew it at the right time. Before E&amp;amp;Q Online, the company was not used to keep track of the due dates. So, when a project showed up, part of the workforce would not be able to work because some certification was expired. Right now, the administrators receive a list informing how many days are left, as you can see below:&lt;/p&gt;
&lt;img alt="Example of the email that the administrators receive with the users' documents and their due dates." class="align-center" src="images/06-09-EQ-09.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="clients-and-suppliers"&gt;
&lt;h2&gt;Clients and Suppliers&lt;/h2&gt;
&lt;p&gt;These two sections are basically the same. Create, update and delete the clients and the suppliers of the company. It's worth nothing that one of the most annoying parts of the project was finding out how to retrieve the database already in use in the old software to put it on the website. There where more than one thousand clients and suppliers combined in the old database and the data was in a different setup than the one that we need here, since we'll be connecting these clients and suppliers to other parts of the website. Importing the data from the Access database to the MySQL one that the site uses took almost a full afternoon of work.&lt;/p&gt;
&lt;img alt="The screen where the user can see all registered suppliers." class="align-center" src="images/06-10-EQ-10.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="transport"&gt;
&lt;h2&gt;Transport&lt;/h2&gt;
&lt;p&gt;This section is divided in &lt;strong&gt;Vehicles&lt;/strong&gt;, &lt;strong&gt;Travels&lt;/strong&gt;, &lt;strong&gt;Refuels&lt;/strong&gt; and &lt;strong&gt;Maintenances&lt;/strong&gt;. Here, we can create, update or delete each one of those things. Below you can see a screenshot of a refuel where the gas station listed is from the registered &lt;strong&gt;Suppliers&lt;/strong&gt; section:&lt;/p&gt;
&lt;img alt="The screen where the user can see all registered refuels." class="align-center" src="images/06-11-EQ-11.png" /&gt;
&lt;p&gt;An old problem that has been solved is related to the inspections of the tools that are in the cars. Since the workers are in movement everyday, they need to keep equipment from the warehouse inside the cars and the company needs to ocasionally check if everything that was taken from the warehouse is in the car. If, for instance, a worker loses a screwdriver, the company needs to know and charge him for the slip. That's why in the &lt;strong&gt;Vehicles&lt;/strong&gt; section each vehicle has an inspection button where the user (generally it's the job of an intern to do the inspection) can see a list of the current tools there and check if everything matches. The list of current tools is automatically generated, a feature that we will see in the following section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="warehouse"&gt;
&lt;h2&gt;Warehouse&lt;/h2&gt;
&lt;p&gt;The warehouse has more than 1.500 products and tools that the company can sell or use in a project. Here, we can basically create, update or delete a product, move the project, keep track of every movement and generate the SPED report, a list with the products and important information that the company needs to send every year to the &lt;em&gt;Receita Federal&lt;/em&gt;, our version of the IRS.&lt;/p&gt;
&lt;p&gt;As you can see below, there's three important buttons to move products around.&lt;/p&gt;
&lt;p&gt;We can make the products go in the warehouse (if we buy a 10 meters of cable and add it to the warehouse, this is the option).&lt;/p&gt;
&lt;p&gt;We can make products go from the warehouse to a service (if we need to take 3 meters of cable and use it in a project, this is the option), we can also make products go from the warehouse to a vehicle or a toolbox (as we kind of pointed out in the section before this one, this is how we keep track of the tools inside the vehicles).&lt;/p&gt;
&lt;p&gt;And, in the third button, we can return products from a car, a toolbox or a service to the warehouse (if we took 3 meters of cable to use it on a project, but only needed one, we can return two so that we can appropriately charge the client only the one that was used).&lt;/p&gt;
&lt;img alt="The screen where the user can see all options in the Warehouse section." class="align-center" src="images/06-12-EQ-12.png" /&gt;
&lt;p&gt;In this example below, we are moving 20 meters of cable that will be used in a project registered (more about orders of service later):&lt;/p&gt;
&lt;img alt="An example of how to move a product out from the warehouse to a service." class="align-center" src="images/06-13-EQ-13.png" /&gt;
&lt;p&gt;As you can see in the screenshot below, all of these movements can be seen in this section of the website:&lt;/p&gt;
&lt;img alt="The screen where the user can see all registered movements." class="align-center" src="images/06-14-EQ-14.png" /&gt;
&lt;p&gt;We can also generate the data that the company has to send to the government every year. Here's a snippet of this report:&lt;/p&gt;
&lt;img alt="The screen where the user can see all registered movements." class="align-center" src="images/06-15-EQ-15.png" /&gt;
&lt;p&gt;To finish, there's the &lt;strong&gt;Toolbox&lt;/strong&gt; subsection, but it's very similar to the &lt;strong&gt;Vehicles&lt;/strong&gt; one. You can create, update and delete toolboxes and make inspections of its contents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proposals"&gt;
&lt;h2&gt;Proposals&lt;/h2&gt;
&lt;p&gt;This is the section where we develop the budgets for the services and generate business proposals to send the clients. It's also where we can add services and update their prices. If the company adds to its catalog of services, for instance, &amp;quot;Install photovoltaic panel&amp;quot; and charges R$ 1.000,00 per panel, we can add here so that we can use it in the proposal. Or, in another instance, if the price of &amp;quot;Certification Test for CAT. 6 cable&amp;quot; goes up, we need to update it so that we can make the more recent proposals with the new price.&lt;/p&gt;
&lt;p&gt;To formulate a budget, we need to choose who is the client that we're sending the proposal and list all of the products and services that are needed to do the project. After that, the website calculates how much the material is going to cost, how much the services are going to cost, how much would it cost to do it during business hours and how much would it cost to do it out of the business hours (more expensive).&lt;/p&gt;
&lt;img alt="The screen where the user can calculate the total of a proposal - part 01." class="align-center" src="images/06-16-EQ-16.png" /&gt;
&lt;img alt="The screen where the user can calculate the total of a proposal - part 02." class="align-center" src="images/06-17-EQ-17.png" /&gt;
&lt;p&gt;With all of the prices calculated, the user can create a business proposal to sent it via email to the client and generate lists with the materials and the services needed to this project.&lt;/p&gt;
&lt;img alt="The screen with an example of a proposal." class="align-center" src="images/06-18-EQ-18.png" /&gt;
&lt;img alt="The screen with an example of a list of materials." class="align-center" src="images/06-19-EQ-19.png" /&gt;
&lt;p&gt;The example above is totally random.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="orders"&gt;
&lt;h2&gt;Orders&lt;/h2&gt;
&lt;p&gt;If a proposal is accepted, when the workers go out to execute the project, we need to generate an order. This is what this section is all about. We can update the status of the order (if it's ongoing or if it's finished), we can generate a list with all of the products used in the order (based on the movements that we did at the &lt;strong&gt;Warehouse&lt;/strong&gt; section) and we can print the order so that the workers can take it to the field and fill the informations that the company need.&lt;/p&gt;
&lt;img alt="The screen with an example of an order." class="align-center" src="images/06-20-EQ-20.png" /&gt;
&lt;img alt="The screen with an example of a list of materials that went out to the service." class="align-center" src="images/06-21-EQ-21.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="accounts"&gt;
&lt;h2&gt;Accounts&lt;/h2&gt;
&lt;p&gt;This section is simply about creating, updating and deleting accounts, meaning bills to pay and bills to receive. That's it. Just a few CRUDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;That's everything. I've tried to summarize the main points of this project. It's a basic, but very functional HTML, CSS, JavaScript, PHP and MySQL combo. There's a couple of libraries and plugins that helped a lot, like jQuery, Bootstrap, RainTPL, Composer, PHPMailer and a couple of others that I don't recall at this moment.&lt;/p&gt;
&lt;p&gt;The expectation is that we can increase the company's productivity with the website and I'm very confident that this will be achieved.&lt;/p&gt;
&lt;p&gt;If you want to know more about the details of the implementation, you can contact me at &lt;a class="reference external" href="mailto:andrefellipern&amp;#64;gmail.com"&gt;andrefellipern&amp;#64;gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="portfolio"></category><category term="freelance"></category><category term="html"></category><category term="css"></category><category term="javascript"></category><category term="php"></category></entry><entry><title>The 24 Canucks</title><link href="https://andrefellipe.com/swap-regions-opencv.html" rel="alternate"></link><published>2018-10-23T00:15:00-03:00</published><updated>2018-10-23T00:15:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2018-10-23:/swap-regions-opencv.html</id><summary type="html">&lt;p class="first last"&gt;An application that swaps rectangular regions of an image using the OpenCV library. This post was written to the sound of Pavement's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Crooked_Rain,_Crooked_Rain"&gt;Crooked Rain, Crooked Rain&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=lPvhKV3Yg2k"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A question before we start: is Pavement the greatest band ever?&lt;/p&gt;
&lt;p&gt;A difficult question, sure, but one we have to answer somehow. And, of course, the answer is:&lt;/p&gt;
&lt;p&gt;Quite possibly, &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that we've got this extensive discussion out of our systems, let's talk about how we swap regions of an image using the OpenCV library. Let's call it... &lt;strong&gt;The Swapper&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Writer's note&lt;/strong&gt;: I've watched &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Player_(film)"&gt;The Player&lt;/a&gt; recently and this title is my terrible homage to this great movie.&lt;/p&gt;
&lt;p&gt;Here's what the user can do with it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open an image from his file system;&lt;/li&gt;
&lt;li&gt;Randomly swap the quadrants of the image;&lt;/li&gt;
&lt;li&gt;Swap the quadrants of the image selecting a personalized layout configuration;&lt;/li&gt;
&lt;li&gt;Restore the original image;&lt;/li&gt;
&lt;li&gt;Save a new image with one of the operations applied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see &lt;strong&gt;The Swapper&lt;/strong&gt; in action below:&lt;/p&gt;
&lt;img alt="Animated .gif that shows the user opening an image, swapping its regions and saving the new image." class="align-center" src="images/05-01-TheSwapperDemo.gif" /&gt;
&lt;p&gt;To develop this application, we need to know a little about the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/util/ArrayList.html"&gt;ArrayList&lt;/a&gt; class and the concatenation of &lt;strong&gt;Mat&lt;/strong&gt; objects with the OpenCV library. There's a lot of different ways to swap the regions. I've chosen this one for &lt;strong&gt;The Swapper&lt;/strong&gt; for no particular reason.&lt;/p&gt;
&lt;div class="section" id="the-odd-image-problem"&gt;
&lt;h2&gt;The odd image problem&lt;/h2&gt;
&lt;p&gt;Before we talk about changing regions of the image, we must solve an improbable, but possible problem. What if our image has an odd number of rows or columns? This would mean that the regions would not have the same amount of pixels with the division of the quadrants. Such situation can make the swap more difficult. To make things simpler, we first check if the image has an odd number of rows or columns and, if that's the case, we add a padding to make sure that everything is even.&lt;/p&gt;
&lt;p&gt;As you can see below, we do this with the &lt;a class="reference external" href="https://docs.opencv.org/3.4/javadoc/org/opencv/core/Core.html#copyMakeBorder-org.opencv.core.Mat-org.opencv.core.Mat-int-int-int-int-int-"&gt;copyMakeBorder()&lt;/a&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/** Adding padding to the image if there&amp;#39;s an odd number of rows and/or columns */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyMakeBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyMakeBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="respecting-the-user-s-choice"&gt;
&lt;h2&gt;Respecting the user's choice&lt;/h2&gt;
&lt;p&gt;In our application, we have two ways to choose how to swap the regions of the image: one is random and another is doing it ourselves. In both cases, we will fill an &lt;strong&gt;ArrayList&lt;/strong&gt; object named &lt;strong&gt;regions&lt;/strong&gt; with numbers from 0 to 3 where each one represents one region and its position reflects the quadrant where we want to put the region. Take a look at the picture below:&lt;/p&gt;
&lt;img alt="A square with four squares inside of it. The first square has the number 1 and the color orange, the second has the number 2 and the color red, the third has the number 3 and the color green and the fourth has the number 4 and the color blue." class="align-center" src="images/05-02-Regions.png" /&gt;
&lt;p&gt;The numbers can be seen as the regions in the &lt;strong&gt;ArrayList&lt;/strong&gt; object and the squares are the quadrants. If we have a &lt;strong&gt;regions&lt;/strong&gt; object with elements (1, 0, 2, 3), we're swapping the content of the regions in the upper half of the image.&lt;/p&gt;
&lt;p&gt;To perform a random swap, we add 0, 1, 2 and 3 to &lt;strong&gt;regions&lt;/strong&gt; and then shuffle it with the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/util/Collections.html#shuffle(java.util.List)"&gt;shuffle()&lt;/a&gt; method from the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/util/Collections.html"&gt;Collections&lt;/a&gt; class to get a random order.&lt;/p&gt;
&lt;p&gt;In the other case, we only need to check if the user's input is valid and get the values to the &lt;strong&gt;regions&lt;/strong&gt; object.&lt;/p&gt;
&lt;p&gt;Here's the code to do this part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/** Creating a List object that contains four numbers, each one to represent one region&lt;/span&gt;
&lt;span class="cm"&gt;     *  of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;regions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_QUADRANTS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/** Deciding the order of each region on the new image using the user&amp;#39;s choice.&lt;/span&gt;
&lt;span class="cm"&gt;     *  If he chose a random swap, we create a list with numbers from 0 to 3 and put them&lt;/span&gt;
&lt;span class="cm"&gt;     *  in random order.&lt;/span&gt;
&lt;span class="cm"&gt;     *  If he chose a personalized swap, we first check if he chose the same region more&lt;/span&gt;
&lt;span class="cm"&gt;     *  than once. Since we want to swap regions, there must not be duplicates.&lt;/span&gt;
&lt;span class="cm"&gt;     *  If the configurate is appropriate, we create the list of regions from the user&amp;#39;s choice.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomSwapConfiguration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NUMBER_OF_QUADRANTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;checkSpinners&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;getSpinnersValues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstQuadrantSpinnerValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondQuadrantSpinnerValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thirdQuadrantSpinnerValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fourthQuadrantSpinnerValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="choosing-the-right-points"&gt;
&lt;h2&gt;Choosing the right points&lt;/h2&gt;
&lt;p&gt;We're going to need five &lt;strong&gt;Point&lt;/strong&gt; objects (&lt;strong&gt;origin&lt;/strong&gt;, &lt;strong&gt;middle&lt;/strong&gt;, &lt;strong&gt;lowerLeftCorner&lt;/strong&gt;, &lt;strong&gt;upperRightCorner&lt;/strong&gt; and &lt;strong&gt;lowerRightCorner&lt;/strong&gt;) to create the four &lt;strong&gt;Rect&lt;/strong&gt; objects, each one with the points, from where we're going to create our &lt;strong&gt;Mat[]&lt;/strong&gt; object with the four regions. Here's how to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/** Defining the points that characterize each region. */&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;lowerLeftCorner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;upperRightCorner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;lowerRightCorner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating an array of Mat objects to contain the four regions of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;imageRegions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_QUADRANTS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/** First region: upper left of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="cm"&gt;/** Second region: upper right of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upperRightCorner&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="cm"&gt;/** Third region: lower left of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerLeftCorner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="cm"&gt;/** Fourth region: lower right of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lowerRightCorner&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="concatenating-the-situation"&gt;
&lt;h2&gt;Concatenating the situation&lt;/h2&gt;
&lt;p&gt;We need to concatenate the elements of the &lt;strong&gt;imageRegions&lt;/strong&gt; object and put together the swapped image at the end. In our case, since there are four quadrants that we're working on, we will first create a &lt;strong&gt;List&amp;lt;Mat&amp;gt;&lt;/strong&gt; object called &lt;strong&gt;upperHalfMatList&lt;/strong&gt; to contain the first two quadrants (upper left and upper right of the image), then concatenate these two together in a &lt;strong&gt;Mat&lt;/strong&gt; called &lt;strong&gt;upperHalfImage&lt;/strong&gt;. Next, we do the same process to the lower quadrants using &lt;strong&gt;lowerHalfMatList&lt;/strong&gt; and &lt;strong&gt;lowerHalfImage&lt;/strong&gt;. To end, we concatenate vertically &lt;strong&gt;upperHalfImage&lt;/strong&gt; and the &lt;strong&gt;lowerHalfImage&lt;/strong&gt; to generate our swapped image in the &lt;strong&gt;currentImage&lt;/strong&gt; object.&lt;/p&gt;
&lt;p&gt;Here's how everything comes together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/** Creating a Mat that contains the upper half of the swapped image. */&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;upperHalfImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="cm"&gt;/** Creating a List&amp;lt;Mat&amp;gt; object that contains the upper half of the swapped image. */&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;upperHalfMatList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_QUADRANTS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Putting the region randomly selected (or selected by the user) on the first quadrant. */&lt;/span&gt;
    &lt;span class="n"&gt;upperHalfMatList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Putting the region randomly selected (or selected by the user) on the second quadrant. */&lt;/span&gt;
    &lt;span class="n"&gt;upperHalfMatList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Concatenating the upper Mat objects together. */&lt;/span&gt;
    &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hconcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperHalfMatList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upperHalfImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating a Mat that contains the lower half of the swapped image. */&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;lowerHalfImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="cm"&gt;/** Creating a List&amp;lt;Mat&amp;gt; object that contains the lower half of the swapped image. */&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lowerHalfMatList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_QUADRANTS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Putting the region randomly selected (or selected by the user) on the third quadrant. */&lt;/span&gt;
    &lt;span class="n"&gt;lowerHalfMatList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Putting the region randomly selected (or selected by the user) on the fourth quadrant. */&lt;/span&gt;
    &lt;span class="n"&gt;lowerHalfMatList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageRegions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;regions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Concatenating the lower Mat objects together. */&lt;/span&gt;
    &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hconcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerHalfMatList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lowerHalfImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating a List&amp;lt;Mat&amp;gt; object that contains the upper and lower halves of the swapped image. */&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;swappedImageMatList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUMBER_OF_QUADRANTS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Putting the upper half of the image on the list. */&lt;/span&gt;
    &lt;span class="n"&gt;swappedImageMatList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperHalfImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Putting the lower half of the image on the list. */&lt;/span&gt;
    &lt;span class="n"&gt;swappedImageMatList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowerHalfImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/** Concatenating vertically to create the swapped image. */&lt;/span&gt;
    &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vconcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swappedImageMatList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Booyah! Another cool exercise done with the OpenCV library. By the way, there are 24 combinations that can be done with the permutations, so that's where the post's title came from.&lt;/p&gt;
&lt;/div&gt;
</content><category term="digital image processing"></category><category term="java"></category><category term="swing"></category><category term="opencv"></category><category term="dip"></category></entry><entry><title>Negative andre</title><link href="https://andrefellipe.com/negative-opencv.html" rel="alternate"></link><published>2018-10-21T18:23:00-03:00</published><updated>2018-10-21T18:23:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2018-10-21:/negative-opencv.html</id><summary type="html">&lt;p class="first last"&gt;An application that changes pixels values in an image using the OpenCV library. This post was written to the sound of U2's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/War_(U2_album)"&gt;War&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=EM4vblG6BVQ"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Good news, everyone: I'm running again. I've restarted yesterday and I hope to continue for a long time. It's been a while, so I'm taking it easy.&lt;/p&gt;
&lt;p&gt;With this great news in mind, let's talk about how we can work with pixels using the OpenCV library. Today's application is called &lt;strong&gt;Playing with Pixels&lt;/strong&gt;. Here's what the user can do with it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open an image from his file system;&lt;/li&gt;
&lt;li&gt;Choose a region or the whole image to apply operations;&lt;/li&gt;
&lt;li&gt;Change all of the pixels of the selected region to black;&lt;/li&gt;
&lt;li&gt;Change all of the pixels of the selected region to red;&lt;/li&gt;
&lt;li&gt;Change all of the pixels of the selected region to its color's complement;&lt;/li&gt;
&lt;li&gt;Restore the original image;&lt;/li&gt;
&lt;li&gt;Save a new image with one of the operations applied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the &lt;strong&gt;Playing with Pixels&lt;/strong&gt; application in action below:&lt;/p&gt;
&lt;img alt="Animated .gif that shows the user opening an image, changing it to black, then to red, then to its negative, then restoring back to the original. Then, the user applies the negative to only one area and saves the new image." class="align-center" src="images/04-01-PlayingWithPixelsDemo.gif" /&gt;
&lt;p&gt;Wow! There's a lot of noise in this &lt;strong&gt;.gif&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, in this post, I won't explain everything step-by-step like previously. You can take a look at this &lt;a class="reference external" href="https://github.com/andrefellipe/dip/blob/master/src/Exercise02.java"&gt;link&lt;/a&gt; to see how I've created the user interface. To make things shorter, I will only explain parts of the most important methods.&lt;/p&gt;
&lt;div class="section" id="determining-the-region-of-interest"&gt;
&lt;h2&gt;Determining the Region of Interest&lt;/h2&gt;
&lt;p&gt;A region of interest (ROI) is a part of an image that we want to operate on. We can use any polygon to create ROIs. Here, we're using a rectangle. The user can choose the coordinates of the first point, the upper-left corner of the rectangle, and of the second point, the lower-right corner of the rectangle. If the user doesn't want to choose the points, the full image will compose our ROI. The radio buttons on the interface inform us what the user wants.&lt;/p&gt;
&lt;p&gt;Also, to make it a more smooth user experience, we validate the user's input in the fields to make sure that he has chosen a valid positive integer (the &lt;strong&gt;getValueFromField()&lt;/strong&gt; method is responsible for this) and that this number is a valid pixel of the image (you can't choose the pixel in row 3000 and column 2000 if the image's resolution is 500x500).&lt;/p&gt;
&lt;p&gt;Let's take a look at the code that does what was described:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Method that detects the button pressed by the user and performs&lt;/span&gt;
&lt;span class="cm"&gt;   * the appropriate operation.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;operationsButtonActionPerformed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating a full copy of the original image and storing it at&lt;/span&gt;
&lt;span class="cm"&gt;     *  another Mat object to keep the original unaltered. */&lt;/span&gt;
    &lt;span class="n"&gt;currentImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/** Checking which option the user chose in relation to where to&lt;/span&gt;
&lt;span class="cm"&gt;     *  apply the operation. If it&amp;#39;s in the full image, then the first&lt;/span&gt;
&lt;span class="cm"&gt;     *  vertice of the rectangle that defines the region should be at the&lt;/span&gt;
&lt;span class="cm"&gt;     *  origin of the image and the second vertices at the last pixel, whose&lt;/span&gt;
&lt;span class="cm"&gt;     *  position is equal to the number of columns and rows that the image has.&lt;/span&gt;
&lt;span class="cm"&gt;     *  Else, if the user chose to insert himself the region of interest,&lt;/span&gt;
&lt;span class="cm"&gt;     *  the application must get the value from the fields and define the points&lt;/span&gt;
&lt;span class="cm"&gt;     *  accordingly.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullImageChosen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;firstPointX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;firstPointY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;secondPointX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;secondPointY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;firstPointX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getValueFromField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPointXField&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;firstPointY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getValueFromField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPointYField&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;secondPointX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getValueFromField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondPointXField&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;secondPointY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getValueFromField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondPointYField&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Creating the points according to the choice made by the user.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;firstPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPointX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstPointY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;secondPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondPointX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondPointY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Checking if the user chose a value outside of the image, something&lt;/span&gt;
&lt;span class="cm"&gt;     * that is not acceptable. If the user chose a value beyond the image&amp;#39;s&lt;/span&gt;
&lt;span class="cm"&gt;     * height or width, then this value is readjusted to the image&amp;#39;s border value.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;firstPointXField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;firstPointYField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secondPointXField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secondPointYField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our rectangle is created with the help from an object from the &lt;a class="reference external" href="https://docs.opencv.org/3.4/javadoc/org/opencv/core/Rect.html"&gt;Rect&lt;/a&gt; class. We use its constructor to create a rectangle with the vertices defined by the chosen two points.&lt;/p&gt;
&lt;p&gt;To get our ROI, we create a new object from the &lt;strong&gt;Mat&lt;/strong&gt; class, &lt;strong&gt;roiMat&lt;/strong&gt;. This object is created by using a &lt;a class="reference external" href="https://docs.opencv.org/3.4/javadoc/org/opencv/core/Mat.html#Mat-org.opencv.core.Mat-org.opencv.core.Rect-"&gt;constructor&lt;/a&gt; from the &lt;strong&gt;Mat&lt;/strong&gt; class that allows us to pass a &lt;strong&gt;Mat&lt;/strong&gt; object and a &lt;strong&gt;Rect&lt;/strong&gt; object. The result is only the content from the &lt;strong&gt;Mat&lt;/strong&gt; that resides in the area defined by the &lt;strong&gt;Rect&lt;/strong&gt;. If the chosen points were (0,0) and (10,10), our &lt;strong&gt;roiMat&lt;/strong&gt; would be a 10x10 square with the content of the original image from this exact area.&lt;/p&gt;
&lt;p&gt;As we did previously, we need to pass the content from the ROI to a byte array, our good old &lt;strong&gt;buffer&lt;/strong&gt;, a process that we've seen here before.&lt;/p&gt;
&lt;p&gt;The following code creates our ROI and pass its content to our &lt;strong&gt;buffer&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Creating a Mat object with the region of interest chosen by the user.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;roiMat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondPoint&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="cm"&gt;/** We need to create a byte array that will store the matImage contents.&lt;/span&gt;
&lt;span class="cm"&gt;     *  We find the size of this array through the number of elements in the&lt;/span&gt;
&lt;span class="cm"&gt;     *  Mat object. */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;roiMat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;roiMat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;roiMat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating the byte array. */&lt;/span&gt;
    &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/** Using the get() method to put all of the elements of the region of interest&lt;/span&gt;
&lt;span class="cm"&gt;     *  inside the byte array. */&lt;/span&gt;
    &lt;span class="n"&gt;roiMat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="changing-the-pixels-of-the-roi"&gt;
&lt;h2&gt;Changing the pixels of the ROI&lt;/h2&gt;
&lt;p&gt;In our application, we store the information about which button the user clicked with the &lt;strong&gt;buttonChosen&lt;/strong&gt; &lt;strong&gt;String&lt;/strong&gt; and use it as the key to a &lt;strong&gt;switch&lt;/strong&gt; statement to determine what should be done. If the user wants to show it back the original image, we only need to assign our &lt;strong&gt;currentImage&lt;/strong&gt; &lt;strong&gt;Mat&lt;/strong&gt; object to the &lt;strong&gt;originalImage&lt;/strong&gt; object that we made sure it wasn't going to be altered in any circumstance. In the other cases, we need to alter the pixels in our buffer and then put it back in the &lt;strong&gt;roiMat&lt;/strong&gt; before showing it again on the screen.&lt;/p&gt;
&lt;p&gt;To alter the pixels, we can use one of the two helper methods: &lt;strong&gt;changePixelsColor()&lt;/strong&gt; and &lt;strong&gt;changePixelsToNegative()&lt;/strong&gt;. The first one will be used if we want to change the &lt;strong&gt;roiMat&lt;/strong&gt; pixels to a single color (in this case, black or red). The second one will be used if we want the find the negative of the ROI.&lt;/p&gt;
&lt;p&gt;This piece of the puzzle can be seen here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/** Creating a String variable to know which button was clicked. */&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;buttonChosen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getActionCommand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     *  Using a switch statement to control what should be done based&lt;/span&gt;
&lt;span class="cm"&gt;     *  on which button the user clicked.&lt;/span&gt;
&lt;span class="cm"&gt;     *  If the user chose the black pixels option, we must change the&lt;/span&gt;
&lt;span class="cm"&gt;     *  chosen pixels to the color black throught the call of the&lt;/span&gt;
&lt;span class="cm"&gt;     *  changePixelsColors() method. The same in case of the red pixels&lt;/span&gt;
&lt;span class="cm"&gt;     *  option, but using the color red.&lt;/span&gt;
&lt;span class="cm"&gt;     *  If the user chose the negative option, we change the chosen pixels&lt;/span&gt;
&lt;span class="cm"&gt;     *  using the calculatePixelNegative() method.&lt;/span&gt;
&lt;span class="cm"&gt;     *  If the user chose the restore option, we only need to get the original&lt;/span&gt;
&lt;span class="cm"&gt;     *  pixels.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttonChosen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Black Pixels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;changePixelsColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Red Pixels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;changePixelsColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Negative Pixels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;changePixelsToNegative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Restore Original Image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;currentImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;originalImage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Putting the newly calculated pixels values on the region of&lt;/span&gt;
&lt;span class="cm"&gt;     * interest with the put() method.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;roiMat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Calling the showImage() method the display the new image on&lt;/span&gt;
&lt;span class="cm"&gt;     * the screen.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-java-unsigned-problem"&gt;
&lt;h2&gt;The Java unsigned problem&lt;/h2&gt;
&lt;p&gt;If you've worked with Java before, you should know that this programming language doesn't have an unsigned data type. For instance, a &lt;a class="reference external" href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"&gt;byte&lt;/a&gt; data type is an &lt;strong&gt;8-bit&lt;/strong&gt; signed two's complement integer. It can represent a number from &lt;strong&gt;-128 to 127&lt;/strong&gt;. If we're working with &lt;strong&gt;8-bit&lt;/strong&gt; images and representing the values in a byte array, how are we going to put the value &lt;strong&gt;200&lt;/strong&gt; if a byte in Java can't represent this number?&lt;/p&gt;
&lt;p&gt;The answer isn't so trivial, but it's a simple one.&lt;/p&gt;
&lt;p&gt;First, we're going to take our byte and use the &lt;strong&gt;AND&lt;/strong&gt; operator with the number &lt;strong&gt;0xff&lt;/strong&gt;. &lt;strong&gt;0xff&lt;/strong&gt; is the hexadecimal &lt;strong&gt;FF&lt;/strong&gt;, which is an integer of value &lt;strong&gt;255&lt;/strong&gt;. Its binary representation is &lt;strong&gt;00000000000000000000000011111111&lt;/strong&gt;, a &lt;strong&gt;32-bit&lt;/strong&gt; integer (int data type in Java). When we do this, we have a &lt;strong&gt;32-bit&lt;/strong&gt; number where the last &lt;strong&gt;8&lt;/strong&gt; bits are our desired value and the rest is &lt;strong&gt;0&lt;/strong&gt;. This means that we can do operations between integers and cast it back to a byte to put it in the array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="changing-the-values-in-the-buffer"&gt;
&lt;h2&gt;Changing the values in the buffer&lt;/h2&gt;
&lt;p&gt;In the case of the &lt;strong&gt;changePixelsColor()&lt;/strong&gt;, this method receives an int array of length three where each position represents the value from each channel. The first position contains the blue channel, the second has the green channel and the third has the red channel. If we want the color red, we pass it &lt;strong&gt;new int[] {0, 0, 255}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inside the method, we iterate through the &lt;strong&gt;buffer&lt;/strong&gt; and put the values of the desired color in the channels. To change it to a black pixel value, we pass &lt;strong&gt;new int[] {0, 0, 0}&lt;/strong&gt;. For green? &lt;strong&gt;new int[] {0, 255, 0}&lt;/strong&gt;. For a color that I don't know? &lt;strong&gt;new int[] {31, 200, 109}&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;changePixelsToNegative()&lt;/strong&gt; method is a little different, but not much. The negative color of a color is its complementary color.&lt;/p&gt;
&lt;p&gt;Wow, that's a lot of colors.&lt;/p&gt;
&lt;p&gt;Don't worry! This value is the distance between the color value and &lt;strong&gt;255&lt;/strong&gt;. In this case, we need to get the current value in the &lt;strong&gt;buffer&lt;/strong&gt;, find the distance to &lt;strong&gt;255&lt;/strong&gt; and replace the value in the &lt;strong&gt;buffer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Helper method to calculate the negative complement of each value in each&lt;/span&gt;
&lt;span class="cm"&gt;   * channel on every pixel in the region of interest. Since Java does not have&lt;/span&gt;
&lt;span class="cm"&gt;   * any unsigned byte data type, we must cast the value to an int using the AND&lt;/span&gt;
&lt;span class="cm"&gt;   * operator with 0xff, find the complement (distance from the number to 255) and&lt;/span&gt;
&lt;span class="cm"&gt;   * cast the result to a byte type.&lt;/span&gt;
&lt;span class="cm"&gt;   * @param buffer - byte array with the values of the pixels from an image.&lt;/span&gt;
&lt;span class="cm"&gt;   * @param bufferSize - size of the byte array.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;changePixelsToNegative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Helper method to change the pixel value of each value in each channel on every&lt;/span&gt;
&lt;span class="cm"&gt;   * pixel in the region of interest. Here, we must pass an array of lenght three with&lt;/span&gt;
&lt;span class="cm"&gt;   * the new pixel value. Since Java does not have any unsigned byte data type, we must pass&lt;/span&gt;
&lt;span class="cm"&gt;   * an int array and use the AND operator with 0xff, then cast it to a byte type.&lt;/span&gt;
&lt;span class="cm"&gt;   * @param buffer - byte array with the values of the pixels from an image.&lt;/span&gt;
&lt;span class="cm"&gt;   * @param bufferSize - size of the byte array.&lt;/span&gt;
&lt;span class="cm"&gt;   * @param newPixelValue - array with the values of each channel of the new color&lt;/span&gt;
&lt;span class="cm"&gt;   * that should be put in place of the current one, respecting the BGR model. It must be&lt;/span&gt;
&lt;span class="cm"&gt;   * an array of lenght three, where the number in the first position represent the blue&lt;/span&gt;
&lt;span class="cm"&gt;   * channel, the one in the second position represent the green channel and the third position&lt;/span&gt;
&lt;span class="cm"&gt;   * represents the red color.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;changePixelsColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;newPixelValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newPixelValue&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newPixelValue&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newPixelValue&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And I guess that's it! I hope that you've enjoyed today's post. Before I go, let's just see what color is &lt;strong&gt;new int[] {31, 200, 109}&lt;/strong&gt;:&lt;/p&gt;
&lt;img alt="Picture of andre's face with a rectangle kind of green in front. This green is the random color from the text." class="align-center" src="images/04-02-PlayingWithPixelsRandom.png" /&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;/div&gt;
</content><category term="digital image processing"></category><category term="java"></category><category term="swing"></category><category term="opencv"></category><category term="dip"></category></entry><entry><title>Hello, Tina Fey's Bossypants</title><link href="https://andrefellipe.com/tina-fey-opencv.html" rel="alternate"></link><published>2018-10-17T22:00:00-03:00</published><updated>2018-10-17T22:00:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2018-10-17:/tina-fey-opencv.html</id><summary type="html">&lt;p class="first last"&gt;An application that loads an image using the OpenCV library. This post was written to the sound of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/San_Cisco#Studio_albums"&gt;San Cisco's&lt;/a&gt; eponymous album. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=7pl2L-ldozI"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Here's a not so hot take: Tina Fey is awesome. Her accomplishments as a performer, writer and producer on Saturday Night Live, 30 Rock, Mean Girls, Unbreakable Kimmy Schmidt and other projects make her one of the greatest comedy minds of the 21st century.&lt;/p&gt;
&lt;p&gt;And what's the relation between Tina Fey, the OpenCV library and Java?&lt;/p&gt;
&lt;p&gt;None. I just find her incredible and I'm loving her autobiography, 2011's Bossypants.&lt;/p&gt;
&lt;p&gt;Anyway, today we'll build an application where the user can choose a file from its file system and, if it's a valid image, it gets displayed on the screen. Let's call it &lt;strong&gt;Image Viewer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can see the final result below:&lt;/p&gt;
&lt;img alt="Screenshot of the Image Viewer application showing a picture of Bossypants, Tina Fey's autobiography." class="align-center" src="images/03-01-ImageViewer.png" /&gt;
&lt;div class="section" id="creating-the-user-interface"&gt;
&lt;h2&gt;Creating the user interface&lt;/h2&gt;
&lt;p&gt;Inside the OpenCV library, we have a cross-platform GUI called &lt;a class="reference external" href="https://docs.opencv.org/3.4.3/d7/dfc/group__highgui.html"&gt;HighGUI&lt;/a&gt; and a method called &lt;a class="reference external" href="https://docs.opencv.org/3.4.3/d7/dfc/group__highgui.html#ga453d42fe4cb60e5723281a89973ee563"&gt;imshow()&lt;/a&gt;. With this method, we can create a window and display an image within it. This is an easy and quick way to create prototypes.&lt;/p&gt;
&lt;p&gt;Unfortunately, there wasn't an &lt;strong&gt;imshow()&lt;/strong&gt; method available for Java for a good amount of time, so we see a lot of work and tutorials using the Swing package, a popular GUI API that we've used on other posts before.&lt;/p&gt;
&lt;p&gt;Thanks to this situation, we will use Swing to build the interfaces that we need. If your knowledge of Swing is limited, I recommend that you take a look at some &lt;a class="reference external" href="https://andrefellipe.com/category/swing.html"&gt;previous posts made here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh yeah, there's another thing, I'm using &lt;strong&gt;OpenCV 3.2.0&lt;/strong&gt; and I don't think there's a Java wrapper to the &lt;strong&gt;OpenCV HighGUI&lt;/strong&gt; module. Newer versions of the library have it, though.&lt;/p&gt;
&lt;p&gt;The first thing we need to do, assuming that you've already know a little about Swing and can create a basic frame, is load the OpenCV library. We do this with the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#loadLibrary(java.lang.String)"&gt;loadLibrary()&lt;/a&gt; method from the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/lang/System.html"&gt;System&lt;/a&gt; class. Also, in the image above, we can see that our application needs a &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/JFileChooser.html"&gt;JFileChooser&lt;/a&gt; and a &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/JLabel.html"&gt;JLabel&lt;/a&gt;. This means that, before the main method and the frame constructor, we need bring all of these components to life. We do this with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/** Loading the OpenCV library. */&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NATIVE_LIBRARY_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creating the JFileChooser object that it&amp;#39;s used to&lt;/span&gt;
&lt;span class="cm"&gt;   *  give the user a good experience while he searches for&lt;/span&gt;
&lt;span class="cm"&gt;   *  the image to be loaded. */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;JFileChooser&lt;/span&gt; &lt;span class="n"&gt;imageChooser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JFileChooser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creating JLabel object that will display the image&lt;/span&gt;
&lt;span class="cm"&gt;   *  to the user. */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;JLabel&lt;/span&gt; &lt;span class="n"&gt;imageLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JLabel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this ready, we style the components to provide a better user experience, add them to the content pane and add the necessary listeners. For instance, we use the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/JFileChooser.html#addChoosableFileFilter(javax.swing.filechooser.FileFilter)"&gt;addChoosableFileFilter()&lt;/a&gt; method from the &lt;strong&gt;JFileChooser&lt;/strong&gt; to allow the user to filter the search results in the directories. In our case, we only want to display images, so we will filter the &lt;strong&gt;.gif&lt;/strong&gt;, &lt;strong&gt;.jpg&lt;/strong&gt; and &lt;strong&gt;.png&lt;/strong&gt; files. To do this, we need an object from the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/filechooser/FileNameExtensionFilter.html"&gt;FileNameExtensionFilter&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;The following code implements these tasks in our components:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/** Personalizing the JFileChooser object, adding it to the content pane and adding an ActionListener for when the user&lt;/span&gt;
&lt;span class="cm"&gt;     *  clicks in the &amp;quot;Open&amp;quot; or &amp;quot;Cancel&amp;quot; option that shows up in the component. */&lt;/span&gt;
    &lt;span class="n"&gt;imageChooser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addChoosableFileFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileNameExtensionFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Graphics Files (.gif, .jpg, .png)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GridBagConstraints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gridx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gridy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridBagConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOTH&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;getContentPane&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageChooser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imageChooser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addActionListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ActionListener&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;actionPerformed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;imageChooserActionPerformed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="cm"&gt;/** Personalizing the JLabel object and adding it to the content pane. */&lt;/span&gt;
    &lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BorderFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createLineBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLACK&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOpaque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WHITE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHorizontalAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SwingConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CENTER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setVerticalAlignment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SwingConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CENTER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GridBagConstraints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gridx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gridy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;insets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Insets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;getContentPane&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gridConstraints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our interface is ready. When we see the &lt;strong&gt;imageChooser&lt;/strong&gt; component on our screen, we see that there are two buttons. One with the name &amp;quot;Open&amp;quot; and another one with the name &amp;quot;Cancel&amp;quot;. The &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/event/ActionListener.html#actionPerformed(java.awt.event.ActionEvent)"&gt;actionPerformed()&lt;/a&gt; method is called when the user clicks on one of these buttons. Now, we need to define the behaviour of the application when one of these events is triggered. Our helper method &lt;strong&gt;imageChooserActionPerformed()&lt;/strong&gt; will handle this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="showing-the-image-on-the-screen"&gt;
&lt;h2&gt;Showing the image on the screen&lt;/h2&gt;
&lt;p&gt;With the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/event/ActionEvent.html#getActionCommand()"&gt;getActionCommand()&lt;/a&gt; method from the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/event/ActionEvent.html"&gt;ActionEvent&lt;/a&gt; class we can determine which button was clicked. We know that the property &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/JFileChooser.html#APPROVE_SELECTION"&gt;APPROVE_SELECTION&lt;/a&gt; from the &lt;strong&gt;JFileChooser&lt;/strong&gt; class is related to the &amp;quot;Open&amp;quot; button, so we assume that any other action will be related to the &amp;quot;Cancel&amp;quot; button since we're only interested in opening the image when the user clicks in the &amp;quot;Open&amp;quot; button.&lt;/p&gt;
&lt;p&gt;When the user clicks the &amp;quot;Open&amp;quot; button it means that he wants to see the image that the file represents in the screen. We need to find a way to pass this information to the OpenCV library so that it may help us open the file. Let's create a &lt;strong&gt;String&lt;/strong&gt; named &lt;strong&gt;filePath&lt;/strong&gt; that will store the path to the selected file. This string will store the result of the call of two methods: &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/JFileChooser.html#getSelectedFile()"&gt;getSelectedFile()&lt;/a&gt; from the &lt;strong&gt;JFileChooser&lt;/strong&gt; class and &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/io/File.html#toString()"&gt;toString()&lt;/a&gt; from the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/io/File.html"&gt;File&lt;/a&gt; class. Basically, we get the file that the user selected and get its path in the form of a &lt;strong&gt;String&lt;/strong&gt; object. To display the image using its path, we will create also a private method called &lt;strong&gt;showImage()&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, when the user clicks &amp;quot;Cancel&amp;quot;, he doesn't want to use the application anymore, so it must close. We do this by calling &lt;strong&gt;exit(0)&lt;/strong&gt; from the &lt;strong&gt;System&lt;/strong&gt; class.&lt;/p&gt;
&lt;p&gt;This is the code that makes up an important part of the application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/** Helper method to decide what the application should do after the user interaction.&lt;/span&gt;
&lt;span class="cm"&gt;   *  If the user selects a file and clicks the &amp;quot;Open&amp;quot; button, it calls other methods&lt;/span&gt;
&lt;span class="cm"&gt;   *  that have the responsability to process the file and, if it&amp;#39;s a valid image, show&lt;/span&gt;
&lt;span class="cm"&gt;   *  in the JLabel object.&lt;/span&gt;
&lt;span class="cm"&gt;   *  If the user clicks the &amp;quot;Cancel&amp;quot; button, it closes the application. */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;imageChooserActionPerformed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActionEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getActionCommand&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JFileChooser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;APPROVE_SELECTION&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageChooser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSelectedFile&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;showImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;showImage()&lt;/strong&gt; method is the juicy part of the application. It's here that we start to deal with the OpenCV library. Our plan is simple: we take the string with the path, read it, transform it into an image that can be displayed on the screen and readjust the screen to the size of the image.&lt;/p&gt;
&lt;p&gt;To do this, we need an object from the  &lt;a class="reference external" href="https://docs.opencv.org/3.4.3/d3/d63/classcv_1_1Mat.html#details"&gt;Mat&lt;/a&gt; class. This class can be used to store grayscale or color images. We use the &lt;a class="reference external" href="https://docs.opencv.org/3.4.3/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56"&gt;imread()&lt;/a&gt; method from the &lt;a class="reference external" href="https://docs.opencv.org/3.4.3/d4/da8/group__imgcodecs.html"&gt;Imgcodecs&lt;/a&gt; class to load an image from a file. We pass what this method returns to our &lt;strong&gt;image&lt;/strong&gt; object from the &lt;strong&gt;Mat&lt;/strong&gt; class. In case everything works accordingly to plan, we need to transform the &lt;strong&gt;image&lt;/strong&gt; object to an object of the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/Image.html"&gt;Image&lt;/a&gt; class, since our &lt;strong&gt;imageLabel&lt;/strong&gt; from the Swing package doesn't understand what a &lt;strong&gt;Mat&lt;/strong&gt; object is. In this case, to be more specific, we transform it to an object of the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/image/BufferedImage.html"&gt;BufferedImage&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;With our image prepared, we just set it as the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/Icon.html"&gt;Icon&lt;/a&gt; of our &lt;strong&gt;imageLabel&lt;/strong&gt; to show it on the screen and readjust the size of the window to make sure the user sees everything.&lt;/p&gt;
&lt;p&gt;Guess what we need to do before setting the icon? Yep, another transformation, now from our &lt;strong&gt;Image&lt;/strong&gt; object to an object of the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/javax/swing/ImageIcon.html"&gt;ImageIcon&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;The following code shows our full &lt;strong&gt;showImage()&lt;/strong&gt; method and how to do everything explained above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/** This method is responsible for the exhibition of the image in the screen.&lt;/span&gt;
&lt;span class="cm"&gt;   *  It receives a String with the path to an image inside a directory and shows&lt;/span&gt;
&lt;span class="cm"&gt;   *  the image on the user&amp;#39;s screen.  */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/** Initializing the Mat object that represents the pixels of the image. */&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/** Using the method imread() to create a Mat object from the file chosen by&lt;/span&gt;
&lt;span class="cm"&gt;     *  the user. The try/catch block is used because of a bug in the OpenCV Java&lt;/span&gt;
&lt;span class="cm"&gt;     *  bindings that throws an Exception if the file chosen has less than 140&lt;/span&gt;
&lt;span class="cm"&gt;     *  characters. If it isn&amp;#39;t used, we would see an error message in the console. */&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Imgcodecs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Testing if the image was loaded as expected. The dataAddr() method points&lt;/span&gt;
&lt;span class="cm"&gt;     *  to an internal data address. If it&amp;#39;s equal to 0, the imread method wasn&amp;#39;t&lt;/span&gt;
&lt;span class="cm"&gt;     *  able to create a valid image from the chosen file. If it isn&amp;#39;t, we create&lt;/span&gt;
&lt;span class="cm"&gt;     *  an Image object from the Mat since we need to make this conversion to show&lt;/span&gt;
&lt;span class="cm"&gt;     *  the resulting image on the screen. */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dataAddr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="cm"&gt;/** Showing the dialog box with an error message if the file isn&amp;#39;t a valid&lt;/span&gt;
&lt;span class="cm"&gt;       *  image. */&lt;/span&gt;
      &lt;span class="n"&gt;JOptionPane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;showConfirmDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The file chosen is not a valid image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s"&gt;&amp;quot;Invalid Image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JOptionPane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_OPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JOptionPane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="cm"&gt;/** Creating an Image object from the Mat object. */&lt;/span&gt;
      &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;loadedImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toBufferedImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="cm"&gt;/** Setting the newly created Image as the Icon of&lt;/span&gt;
&lt;span class="cm"&gt;       *  the JLabel that shows the image. */&lt;/span&gt;
      &lt;span class="n"&gt;imageLabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ImageIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loadedImage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

      &lt;span class="cm"&gt;/** Resizing the window to make sure that, if a new image is loaded,&lt;/span&gt;
&lt;span class="cm"&gt;       *  its display on the screen doesn&amp;#39;t get limited by the previous image&lt;/span&gt;
&lt;span class="cm"&gt;       *  size. */&lt;/span&gt;
      &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see in the code above, there's a helper method that we didn't discussed so far, the &lt;strong&gt;toBufferedImage()&lt;/strong&gt; method. It was made to receive a Mat object and return an &lt;strong&gt;Image&lt;/strong&gt; object.&lt;/p&gt;
&lt;p&gt;The first step of the transformation is to find out if we're talking about a grayscale or BGR image. To find this informaton, we check the number of channels of our &lt;strong&gt;matImage&lt;/strong&gt;, the image in question represented as a &lt;strong&gt;Mat&lt;/strong&gt; object. If it has more than one channel, it's a BGR image (in fact, there will be three channels, one for each color of the RGB model). The variable &lt;strong&gt;type&lt;/strong&gt; will store the information about what color model we're using. The &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/image/BufferedImage.html#TYPE_BYTE_GRAY"&gt;TYPE_BYTE_GRAY&lt;/a&gt; or the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/image/BufferedImage.html#TYPE_3BYTE_BGR"&gt;TYPE_3BYTE_BGR&lt;/a&gt; property will tell it to the variable which model should we use.&lt;/p&gt;
&lt;p&gt;Now we need to have a tricky conversation. The content of the &lt;strong&gt;matImage&lt;/strong&gt; object is the data about the image. We will take all of this content and put it on a byte array, since we're here representing the image as a 8-bit image. Let's call it &lt;strong&gt;buffer&lt;/strong&gt;. Then, we will create the &lt;strong&gt;bufferedImage&lt;/strong&gt; object from the &lt;strong&gt;BufferedImage&lt;/strong&gt; class and pass to it all of the content from the &lt;strong&gt;matImage&lt;/strong&gt; object, meaning, of course, the &lt;strong&gt;buffer&lt;/strong&gt;. This is not a direct process, so hear me out.&lt;/p&gt;
&lt;p&gt;Since we have images from different sizes, we first need to find out what's the size of the &lt;strong&gt;buffer&lt;/strong&gt; that we need. An object from the &lt;strong&gt;Mat&lt;/strong&gt; class has rows, columns and channels to represent the pixels from an image. Each pixel, positioned in a point represented by a row and a column number, has one channel if it's a grayscale image or three if it's a color image. To discover the size of our &lt;strong&gt;buffer&lt;/strong&gt; that stores the content of the image, we only need to multiply the number of channels with the number of rows and the number of columns.&lt;/p&gt;
&lt;p&gt;Next, we put all of the elements of &lt;strong&gt;matImage&lt;/strong&gt; in the &lt;strong&gt;buffer&lt;/strong&gt; using the &lt;a class="reference external" href="https://docs.opencv.org/3.4/javadoc/org/opencv/core/Mat.html#get-int-int-byte:A-"&gt;get()&lt;/a&gt; method from the &lt;strong&gt;Mat&lt;/strong&gt; class. Now we're ready to create our &lt;strong&gt;BufferedImage&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before creating this object, it's important to remember that our &lt;strong&gt;bufferedImage&lt;/strong&gt; needs to be of the same size as the &lt;strong&gt;matImage&lt;/strong&gt; and have the corresponding type (8-bit grayscale or 8-bit color image, per example).&lt;/p&gt;
&lt;p&gt;Now the question is: how do we put the data from the &lt;strong&gt;buffer&lt;/strong&gt; in the &lt;strong&gt;bufferedImage&lt;/strong&gt;? Do not fear, my friend, it's a weird, but easy process.&lt;/p&gt;
&lt;p&gt;We only need to get the array of bytes of the &lt;strong&gt;bufferedImage&lt;/strong&gt;. Then, we use the &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#arraycopy(java.lang.Object,int,java.lang.Object,int,int)"&gt;arraycopy()&lt;/a&gt; method from the &lt;strong&gt;System&lt;/strong&gt; class to finalize our image.&lt;/p&gt;
&lt;p&gt;Inside our &lt;strong&gt;bufferedImage&lt;/strong&gt; there's a &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/image/DataBufferByte.html"&gt;DataBufferByte&lt;/a&gt;, a class that encapsulates an array of bytes. The data in this class it's the destination that we need to find to pass the content of our &lt;strong&gt;buffer&lt;/strong&gt;. This &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/image/DataBuffer.html"&gt;DataBuffer&lt;/a&gt; is encapsulated by a &lt;a class="reference external" href="https://docs.oracle.com/javase/10/docs/api/java/awt/image/Raster.html"&gt;Raster&lt;/a&gt;, a class that represents a rectangular array of pixels. We chain together a couple of get methods from those classes to get this data.&lt;/p&gt;
&lt;p&gt;If I were a betting man, I would bet that you didn't completely understood everything I've just written, but, by looking at the following piece of code, you probably will see that this is not a difficult process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/** Helper method to transform a Mat object in a BufferedImage object. */&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="nf"&gt;toBufferedImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/** Using the channels() method from Mat to determine if we have&lt;/span&gt;
&lt;span class="cm"&gt;     *  a grayscale or BGR image. */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BufferedImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_BYTE_GRAY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BufferedImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_3BYTE_BGR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** We need to create a byte array that will store the matImage contents.&lt;/span&gt;
&lt;span class="cm"&gt;     *  We find the size of this array through the number of elements in the&lt;/span&gt;
&lt;span class="cm"&gt;     *  Mat object. */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bufferSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating the byte array. */&lt;/span&gt;
    &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bufferSize&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/** Using the get() method to put all of the elements of the Mat object&lt;/span&gt;
&lt;span class="cm"&gt;     *  with the image inside the byte array. */&lt;/span&gt;
    &lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/** Creating a BufferedImage (subclass of Image) with the same size and&lt;/span&gt;
&lt;span class="cm"&gt;     *  appropriate type as the image represented by the Mat object. */&lt;/span&gt;
    &lt;span class="n"&gt;BufferedImage&lt;/span&gt; &lt;span class="n"&gt;bufferedImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;matImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/** Getting the data from the DataBuffer (a class that encapsulates one or more data arrays)&lt;/span&gt;
&lt;span class="cm"&gt;     *  of the BufferedImage object. The DataBuffer itself is encapsulated by a Raster, a class&lt;/span&gt;
&lt;span class="cm"&gt;     *  that represents a rectangular array of pixels.&lt;/span&gt;
&lt;span class="cm"&gt;     *  This step is done so that we can have access to the pixels of the BufferedImage object&lt;/span&gt;
&lt;span class="cm"&gt;     *  that will receive the data from the Mat object. */&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;targetPixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;DataBufferByte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;bufferedImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRaster&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getDataBuffer&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/** Copying all of the byte array with the data from the Mat object to the pixels of the&lt;/span&gt;
&lt;span class="cm"&gt;     *  BufferedImage, thus, creating an Image object that can be shown in a JLabel component. */&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;arraycopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetPixels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bufferedImage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it. It's also important to note that, in our application, if you don't choose an image, a message shows up informing you that you didn't choose a valid image, as you can see below:&lt;/p&gt;
&lt;img alt="Screenshot of the Image Viewer application showing an error because the user tried to open a Markdown file, instead of an image." class="align-center" src="images/03-02-ImageViewerError.png" /&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://github.com/andrefellipe/dip/blob/master/src/Exercise01.java"&gt;link&lt;/a&gt; for the full code if you need to check it out. Thanks for reading! Here's also a sneak peek of our next post about the OpenCV Library using today's application:&lt;/p&gt;
&lt;img alt="Screenshot of the Image Viewer application showing our next application. In the image, there's a negative image of my face." class="align-center" src="images/03-03-ImageViewerSneakPeek.png" /&gt;
&lt;/div&gt;
</content><category term="digital image processing"></category><category term="java"></category><category term="swing"></category><category term="opencv"></category><category term="dip"></category></entry><entry><title>Hello, OpenCV and Java</title><link href="https://andrefellipe.com/opencv-java.html" rel="alternate"></link><published>2018-08-29T16:50:00-03:00</published><updated>2018-10-03T23:40:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2018-08-29:/opencv-java.html</id><summary type="html">&lt;p class="first last"&gt;A tutorial to use OpenCV with Java. This post was written to the sound of Hall &amp;amp; Oates' &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Big_Bam_Boom"&gt;Big Bam Boom&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=s_8KR-n2fBQ"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This tutorial will not teach you how to compile your own OpenCV using the source code. I recommend that you try this at a future date for learning purposes. At this moment, let's try a different approach. I am using Ubuntu 18.04 and this tutorial will only work for distributions of the Linux operating system. You will see why below.&lt;/p&gt;
&lt;p&gt;Also, I expect that you have a general knowledge about Java. If you know nothing about it so far, just follow the instructions.&lt;/p&gt;
&lt;p&gt;Let's dive in!&lt;/p&gt;
&lt;div class="section" id="checking-if-you-have-java"&gt;
&lt;h2&gt;Checking if you have Java&lt;/h2&gt;
&lt;p&gt;Open the terminal (ctrl + alt + T).&lt;/p&gt;
&lt;p&gt;Run the following command to check if you already have Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You are good to go if you see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;java version &amp;quot;1.8.0_181&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Java(TM) SE Runtime Environment (build 1.8.0_181-b13)&lt;/span&gt;
&lt;span class="go"&gt;Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may have another version of Oracle's Java or OpenJDK, but this should not be a problem.&lt;/p&gt;
&lt;p&gt;If you do not see the message above or something similar, you will need to install Java. If you can see the message, jump to the next section.&lt;/p&gt;
&lt;p&gt;Run the following commands to install Oracle's Java 8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo add-apt-repository ppa:webupd8team/java
&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get update
&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install oracle-java8-installer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the &lt;strong&gt;java -version&lt;/strong&gt; command again to make sure everything is fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="download-opencv"&gt;
&lt;h2&gt;Download OpenCV&lt;/h2&gt;
&lt;p&gt;Run the following command to install the OpenCV library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install libopencv-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-our-first-program"&gt;
&lt;h2&gt;Creating Our First Program&lt;/h2&gt;
&lt;p&gt;Using your favorite text editor, create a file named &lt;strong&gt;HelloOpenCVJava.java&lt;/strong&gt;. I am using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Vim_(text_editor)"&gt;Vim&lt;/a&gt;, so the command would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; vim HelloOpenCVJava.java
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, copy and paste the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.opencv.core.Core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloOpenCVJava&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="cm"&gt;/** Loading the OpenCV library. */&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NATIVE_LIBRARY_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/** Printing the OpenCV version. */&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello OpenCV &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/** Printing the Java version. */&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello to you too, Java &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;java.version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's breakdown the &lt;strong&gt;HelloOpenCVJava&lt;/strong&gt; application.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;import&lt;/strong&gt; keyword is necessary to load the &lt;strong&gt;Core&lt;/strong&gt; class from the OpenCV library.&lt;/p&gt;
&lt;p&gt;We use the &lt;strong&gt;NATIVE_LIBRARY_NAME&lt;/strong&gt; property of the Core class to find the corresponding name of the library and use as parameter to the &lt;strong&gt;loadLibrary&lt;/strong&gt; method. In this case, it returns &lt;strong&gt;opencv_java320&lt;/strong&gt;. This will allow us to use the OpenCV library. After that, we print the versions of the library and Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling-and-running-helloopencvjava"&gt;
&lt;h2&gt;Compiling and Running HelloOpenCVJava&lt;/h2&gt;
&lt;p&gt;Your project directory must be looking like this right now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;|__ HelloOpenCVJava.java&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it is, run the following command to compile HelloOpenCVJava.java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; javac -cp /usr/share/OpenCV/java/opencv-320.jar HelloOpenCVJava.java
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you should have your bytecode class file &lt;strong&gt;HelloOpenCVJava.class&lt;/strong&gt;. Here's how the directory should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;|__ HelloOpenCVJava.class&lt;/span&gt;
&lt;span class="go"&gt;|__ HelloOpenCVJava.java&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/findingclasses.html#BABBFCIJ"&gt;-cp flag&lt;/a&gt; tells the compiler to set the system property java.class.path, which is a list of directories, JAR files and ZIP files that contain class files. We are using here to indicate that we want to find our &lt;strong&gt;opencv-320.jar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We have everything we need to run our application now. We do this with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; java -Djava.library.path&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/jni -cp /usr/share/OpenCV/java/opencv-320.jar:. HelloOpenCVJava
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;-Djava.library.path&lt;/strong&gt; sets the &lt;strong&gt;java.library.path&lt;/strong&gt; property (-D is a flag to set a system property) to inform the JVM where it can locate native libraries. This property is part of the system environment used by Java, in order to find and load native libraries used by an application.&lt;/p&gt;
&lt;p&gt;This should be your output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Hello OpenCV 3.2.0!&lt;/span&gt;
&lt;span class="go"&gt;Hello to you too, Java 1.8.0_181!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second line may change depending on your version of Java.&lt;/p&gt;
&lt;p&gt;We did it! Well, I did it. I hope that you can replicate this in your machine.&lt;/p&gt;
&lt;p&gt;To finish, I would like to point out that in the &lt;a class="reference external" href="https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html#set-up-opencv-for-java-in-eclipse"&gt;OpenCV Java Tutorials Documentation&lt;/a&gt; there's a pretty neat tutorial on how to use OpenCV in an IDE like &lt;a class="reference external" href="https://www.eclipse.org/"&gt;Eclipse&lt;/a&gt;, if you prefer to work in such fashion.&lt;/p&gt;
&lt;p&gt;In the next chapter of this journey, we will play a little with Mat objects and some images. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
</content><category term="digital image processing"></category><category term="java"></category><category term="opencv"></category><category term="dip"></category></entry><entry><title>Hello World, Hello Pelican</title><link href="https://andrefellipe.com/introduction.html" rel="alternate"></link><published>2018-08-29T01:30:00-03:00</published><updated>2018-10-03T23:05:00-03:00</updated><author><name>Andre Fellipe da Silva</name></author><id>tag:andrefellipe.com,2018-08-29:/introduction.html</id><summary type="html">&lt;p class="first last"&gt;A brief introduction to the site. This post was written to the sound of The Replacement's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tim_(album)"&gt;Tim&lt;/a&gt;. You can listen one of the songs &lt;a class="reference external" href="https://www.youtube.com/watch?v=cbhQKffugNk"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;strong&gt;andrefellipe.com&lt;/strong&gt; was an idea that I had a long time ago to support my personal projects.&lt;/p&gt;
&lt;p&gt;I've developed this personal page using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open-source_software"&gt;open-source&lt;/a&gt; tools, so the very least I can do is thank and mention the projects and the people that made this site possible.&lt;/p&gt;
&lt;p&gt;This site is powered by &lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, a static site generator written in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt;. Thanks to its great documentation and community support, I was able to get everything up and running in a couple of hours. Pelican has a lot of themes developed by its community. The one that you're seeing now is called &lt;a class="reference external" href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; and it was developed by another brazilian, &lt;a class="reference external" href="http://www.alexandrevicenzi.com/"&gt;Alexandre Vicenzi&lt;/a&gt;. I specially love how it looks in a mobile device.&lt;/p&gt;
&lt;p&gt;I would also like to thank the second best student of the Federal University of Rio Grande do Norte, &lt;a class="reference external" href="https://github.com/vitorsr"&gt;Vítor Saraiva&lt;/a&gt;. His &lt;a class="reference external" href="https://vitorsr.github.io/"&gt;website&lt;/a&gt; was the source of inspiration to this idea.&lt;/p&gt;
</content><category term="Introduction"></category><category term="pelican"></category></entry></feed>